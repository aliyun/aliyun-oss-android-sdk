apply plugin: 'maven'
apply plugin: 'signing'


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

// load properties
File localPropertiesFile = project.rootProject.file("local.properties");
if (localPropertiesFile.exists()) {
    properties.load(localPropertiesFile.newDataInputStream())
}
File projectPropertiesFile = project.rootProject.file("project.properties");
if (projectPropertiesFile.exists()) {
    properties.load(projectPropertiesFile.newDataInputStream())
}

// read properties
def projectName = properties.getProperty("project.name")
def projectGroupId = properties.getProperty("project.groupId")
def projectArtifactId = properties.getProperty("project.artifactId")
def projectVersionName = properties.getProperty("project.version")
def projectPackaging = properties.getProperty("project.packaging")
def projectSiteUrl = properties.getProperty("project.siteUrl")
def projectGitUrl = properties.getProperty("project.gitUrl")
def projectRepo = properties.getProperty("project.repo")


def developerId = properties.getProperty("developer.id")
def developerName = properties.getProperty("developer.name")
def developerEmail = properties.getProperty("developer.email")

def ossrhUsername = properties.getProperty("ossrhUsername")
def ossrhPassword = properties.getProperty("ossrhPassword")

def javadocName = properties.getProperty("javadoc.name")

uploadArchives {
    repositories {
        mavenDeployer {

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.groupId = projectGroupId
            pom.artifactId = projectArtifactId
            pom.version = projectVersionName

            pom.project {
                name projectName
                packaging 'aar' //我这里发布的是安卓的包，所有写的aar
                // optionally artifactId can be defined here
                description 'Aliyun Open Services SDK for Android\n' +
                        '      Copyright (C) Alibaba Cloud Computing\n' +
                        '      All rights reserved.\n' +
                        '      版权所有 （C）阿里云计算有限公司\n' +
                        '      http://www.aliyun.com' //project description
                url 'https://github.com/aliyun/aliyun-oss-android-sdk'

                scm {
                    connection 'scm:git:git://github.com/aliyun/aliyun-oss-android-sdk.git'
                    developerConnection 'scm:git:ssh://github.com/aliyun/aliyun-oss-android-sdk.git'
                    url 'https://github.com/aliyun/aliyun-oss-android-sdk'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
            }
        }
    }
}

//签名
signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

// javadoc configuration
javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version projectVersionName
        links "http://docs.oracle.com/javase/7/docs/api"
        title javadocName + " " + projectVersionName + " API"
    }
}
